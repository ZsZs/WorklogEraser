package com.kn.jira.worklogeraser.jiraadapter;

import java.net.URI;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.atlassian.jira.rest.client.IssueRestClient;
import com.atlassian.jira.rest.client.JiraRestClient;
import com.atlassian.jira.rest.client.ProjectRestClient;
import com.atlassian.jira.rest.client.SearchRestClient;
import com.atlassian.jira.rest.client.UserRestClient;
import com.atlassian.jira.rest.client.domain.BasicIssue;
import com.atlassian.jira.rest.client.domain.BasicProject;
import com.atlassian.jira.rest.client.domain.BasicUser;
import com.atlassian.jira.rest.client.domain.Issue;
import com.atlassian.jira.rest.client.domain.SearchResult;
import com.atlassian.jira.rest.client.domain.User;
import com.atlassian.jira.rest.client.domain.Worklog;
import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;
import com.google.common.collect.Lists;

public class JiraAdapter {
   final Logger logger = LoggerFactory.getLogger( getClass() );
   private JiraRestClient jiraClient;
   private final String password;
   private final String serverUriString;
   private final String userName;

   //Constructors
   public JiraAdapter( final String serverUriString, final String userName, final String password ) {
      this.serverUriString = serverUriString;
      this.userName = userName;
      this.password = password;
      instantiateJiraRestClient();
   }
   
   //Public accessors and mutators
   public void deleteWorklog( Worklog worklog ) {
   }

   public List<BasicProject> findAllProjects() {
      List<BasicProject> foundProjects = Lists.newArrayList();
      final ProjectRestClient projectClient = jiraClient.getProjectClient();

      for( final BasicProject projectSummary : projectClient.getAllProjects().claim() ){
         foundProjects.add( projectSummary );
      }
      
      return foundProjects;
   }
   
   public List<Issue> findIssuesByQuery( String query ) {
      List<Issue> foundIssues = Lists.newArrayList();
      
      SearchRestClient searchClient = jiraClient.getSearchClient();
      IssueRestClient issueClient = jiraClient.getIssueClient();
      SearchResult searchResult = searchClient.searchJql( query ).claim();
      for( final BasicIssue issueSummary : searchResult.getIssues() ){
         Issue jiraIssue = issueClient.getIssue( issueSummary.getKey() ).claim();
         foundIssues.add( jiraIssue );
      }
      
      return foundIssues;
   }
   
   public User findUser( BasicUser userSummary ){
      UserRestClient userService = jiraClient.getUserClient();
      return userService.getUser( userSummary.getName() ).claim();
   }

   //Properties
   
   //Protected, private helper methods
   private void instantiateJiraRestClient(){
      URI serverUri = URI.create( serverUriString );
      try{
         jiraClient = new AsynchronousJiraRestClientFactory().createWithBasicHttpAuthentication( serverUri, userName, password );
      }catch( Exception e ){
         e.printStackTrace();
      }
   }

}
