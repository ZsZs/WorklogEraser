package com.kn.jira.worklogeraser.jiraadapter;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.lessThan;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.atlassian.jira.rest.client.domain.BasicProject;
import com.atlassian.jira.rest.client.domain.Issue;
import com.atlassian.jira.rest.client.domain.User;
import com.atlassian.jira.rest.client.domain.Worklog;
import com.google.common.collect.Lists;
import com.kn.jira.worklogeraser.sharedresources.TestConfigurationFixture;

public class JiraAdapterTest {
   private static final String QUERY_CLOSED_AND_OBSOLATE_ISSUES = "project=\"WORKLOG\" AND status=\"Closed\" AND status CHANGED BEFORE \"2013/12/18\"";
   private static final String QUERY_CLOSED_ISSUES = "project=\"WORKLOG\" AND status=\"Closed\"";
   private static final String QUERY_ALL_ISSUES = "project=\"WORKLOG\"";
   private TestConfigurationFixture testConfiguration;
   private JiraAdapter jiraAdapter;

   @Before public void beforeEachTest(){
      testConfiguration = new TestConfigurationFixture();
      testConfiguration.setUp();
      jiraAdapter = testConfiguration.getJiraAdapter();
   }
   
   @After public void afterEachTest(){
      testConfiguration.tearDown();
   }
   
   @Ignore @Test public void deleteWorklog_removesWorklogFromIssue(){
      Issue subjectIssue = findTheFirstSubjectIssue();
      List<Worklog> worklogs = Lists.newArrayList( subjectIssue.getWorklogs() );
      Worklog subjectWorklog = worklogs.get( 0 );
      Integer numberOfWorklogsBeforeDelete = worklogs.size();
      
      jiraAdapter.deleteWorklog( subjectWorklog );
      
      assertThat( Lists.newArrayList( subjectIssue.getWorklogs() ).size(), lessThan( numberOfWorklogsBeforeDelete ));
   }
   
   @Test public void findAllProjects_returnsListOfJiraProjects(){
      List<BasicProject> projects = jiraAdapter.findAllProjects();
      
      assertThat( projects.size(), greaterThan( 0 ));
   }

   @Test public void findIssuesByQuery_returnsListOfJiraIssues(){
      List<Issue> allIssues = jiraAdapter.findIssuesByQuery( QUERY_ALL_ISSUES );
      
      assertThat( allIssues.size(), greaterThan( 0 ));
   }
   
   @Test public void findIssuesByQuery_considersIssueStatus(){
      List<Issue> allIssues = jiraAdapter.findIssuesByQuery( QUERY_ALL_ISSUES );
      List<Issue> closedIssues = jiraAdapter.findIssuesByQuery( QUERY_CLOSED_ISSUES );
      
      assertThat( closedIssues.size(), lessThan( allIssues.size() ));
   }
   
   @Ignore @Test public void findIssuesByQuery_considersIssueStatusAndObsolation(){
      List<Issue> closedIssues = jiraAdapter.findIssuesByQuery( QUERY_CLOSED_ISSUES );
      List<Issue> obsolatedIssues = jiraAdapter.findIssuesByQuery( QUERY_CLOSED_AND_OBSOLATE_ISSUES );
      
      assertThat( obsolatedIssues.size(), lessThan( closedIssues.size() ));
   }
   
   @Test public void findUserDetails_determinesFullUserFromSummary(){
      User userDetails = jiraAdapter.findUserDetails( "admin" );
      
      assertThat( userDetails.getName(), equalTo( "admin" ));
   }
   
   @Test public void signIssueAsManipulated_addsCommentToIssue(){
      //SETUP:
      Issue subjectIssue = findTheFirstSubjectIssue();
      List<Worklog> worklogs = Lists.newArrayList( subjectIssue.getWorklogs() );
      Worklog subjectWorklog = worklogs.get( 0 );
      Integer numberOfCommentsBeforeDelete = Lists.newArrayList( subjectIssue.getComments() ).size();
      
      //EXECUTE:
      jiraAdapter.signIssueAsManipulated( subjectWorklog.getIssueUri() );
      
      //VERIFY:
      subjectIssue = findTheFirstSubjectIssue();
      assertThat( Lists.newArrayList( subjectIssue.getComments() ).size(), greaterThan( numberOfCommentsBeforeDelete ));
   }

   //Private helper methods
   private Issue findTheFirstSubjectIssue() {
      List<Issue> obsolatedIssues = jiraAdapter.findIssuesByQuery( QUERY_CLOSED_AND_OBSOLATE_ISSUES );
      Issue subjectIssue = obsolatedIssues.get( 0 );
      return subjectIssue;
   }
}
