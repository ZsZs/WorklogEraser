package com.kn.jira.worklogeraser.domain;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.List;
import java.util.Properties;

import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.powermock.reflect.Whitebox;

import com.atlassian.jira.rest.client.domain.BasicIssue;
import com.atlassian.jira.rest.client.domain.BasicProject;
import com.kn.jira.worklogeraser.sharedresources.JiraAdapterFixture;
import com.kn.jira.worklogeraser.sharedresources.PdmAdapterFixture;
import com.kn.jira.worklogeraser.sharedresources.TestConfigurationWithMockAdaptersFixture;

public class WorklogEraserTest {
   private Properties configurationProperties;
   private JiraAdapterFixture jiraAdapterFixture;
   private PdmAdapterFixture pdmAdapterFixture;
   private TestConfigurationWithMockAdaptersFixture testConfiguration;
   private WorklogEraser worklogEraser;

   @Before public void beforeEachTest() {
      testConfiguration = new TestConfigurationWithMockAdaptersFixture();
      testConfiguration.setUp();
      jiraAdapterFixture = testConfiguration.getJiraAdapterFixture();
      
      worklogEraser = testConfiguration.getWorklogEraser();
      configurationProperties = testConfiguration.getConfigurationProperties();
   }

   @After public void afterEachTest(){
      testConfiguration.tearDown();
   }
   
   @Test public void perform_calculatesObsolatedWorklogsDate() throws Exception{
      worklogEraser.perform();
      
      Integer obsolescenceTimePeriod = Integer.parseInt( configurationProperties.getProperty( "worklogeraser.obsolescenceTimePeriod" ));
      DateTime currentDate = new DateTime();
      
      assertThat( worklogEraser.getObsolatedWorklogDate(), equalTo( currentDate.minusDays( obsolescenceTimePeriod ).withTimeAtStartOfDay().toDate() ));
   }
   
   @Test public void perform_instantiatesActionLogger(){
      worklogEraser.perform();
      
      EraseActionLogger actionLogger = Whitebox.getInternalState( worklogEraser, "actionsLogger" );
      
      assertThat( actionLogger, notNullValue() );
   }
   
   @Test public void perform_collectsAllJiraProjects(){
      worklogEraser.perform();
      
      List<BasicProject> foundProjects = Whitebox.getInternalState( worklogEraser, "allJiraProjects", WorklogEraser.class );
      
      assertThat( foundProjects, equalTo( jiraAdapterFixture.getProjects() ));
   }

   @Test public void perform_collectsJiraIsuesWithCondition(){
      worklogEraser.perform();
      
      List<BasicIssue> foundIssues = Whitebox.getInternalState( worklogEraser, "subjectIssues", WorklogEraser.class );
      
      assertThat( foundIssues, equalTo( jiraAdapterFixture.getExpectedSubjectIssues() ));
   }

   @Test public void perform_instantiatesMatchingStrategy() throws Exception {
      worklogEraser.perform();
      
      EmployeeMatchingStrategy currentMatchingStrategy = Whitebox.getInternalState( worklogEraser, "employeeMatchingStrategy", WorklogEraser.class ); 
      assertThat( currentMatchingStrategy, equalTo( testConfiguration.getEraseStrategy() ));
   }
   
   //Protected, private helper methods
}