package com.kn.jira.worklogeraser.sharedresources;

import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.List;

import com.atlassian.jira.rest.client.domain.BasicIssue;
import com.atlassian.jira.rest.client.domain.BasicProject;
import com.atlassian.jira.rest.client.domain.Issue;
import com.google.common.collect.Lists;
import com.kn.jira.worklogeraser.jiraadapter.JiraAdapter;

public class JiraAdapterFixture {
   private List<Issue> expectedSubjectIssues = Lists.newArrayList();
   private List<Issue> issues = Lists.newArrayList();
   private JiraAdapter mockJiraAdapter;
   private List<BasicProject> projects = Lists.newArrayList();
   private BasicProject projectA;
   private List<Issue> projectAissues = Lists.newArrayList();
   private List<Issue> projectAexpectedIssues = Lists.newArrayList();
   private BasicProject projectB;
   private List<Issue> projectBissues = Lists.newArrayList();
   private List<Issue> projectBexpectedIssues = Lists.newArrayList();
   
   //Public accessors and mutators
   public void setUp(){
      mockJiraAdapter = mock( JiraAdapter.class );
      createJiraProjects();
      createJiraIssues();
   }
   
   public void tearDown(){
   }

   //Properties
   public List<Issue> getExpectedSubjectIssues() { return expectedSubjectIssues; }
   public List<Issue> getIssues() { return issues; }
   public JiraAdapter getJiraAdapter() { return mockJiraAdapter; }
   public List<BasicProject> getProjects() { return projects; }
   
   //Protected, private helper methods
   private void createJiraIssues(){
      Issue openIssueWithoutWorklog = mock( Issue.class );
      projectAissues.add( openIssueWithoutWorklog );
      projectBissues.add( openIssueWithoutWorklog );
      
      Issue openIssueWithWorklog = mock( Issue.class );
      projectAissues.add( openIssueWithWorklog );
      projectBissues.add( openIssueWithWorklog );
      
      Issue resolvedIssueWithoutWorklog = mock( Issue.class );
      projectAissues.add( resolvedIssueWithoutWorklog );
      projectBissues.add( resolvedIssueWithoutWorklog );
      
      Issue resolvedIssueWithWorklog = mock( Issue.class );
      projectAissues.add( resolvedIssueWithWorklog );
      projectAexpectedIssues.add( resolvedIssueWithWorklog );
      projectBissues.add( resolvedIssueWithWorklog );
      projectBexpectedIssues.add( resolvedIssueWithWorklog );
      
      String query = "project=\"A\""; 
      when( mockJiraAdapter.findIssuesByQuery( query )).thenReturn( projectAexpectedIssues );
      query = "project=\"B\""; 
      when( mockJiraAdapter.findIssuesByQuery( query )).thenReturn( projectBexpectedIssues );
      
      expectedSubjectIssues.addAll( projectAexpectedIssues );
      expectedSubjectIssues.addAll( projectBexpectedIssues );
   }
   
   private void createJiraProjects(){
      projectA = mock( BasicProject.class );
      when( projectA.getKey() ).thenReturn( "A" );
      projects.add( projectA );
      
      projectB = mock( BasicProject.class );
      when( projectB.getKey() ).thenReturn( "B" );
      projects.add( projectB );
      
      when( mockJiraAdapter.findAllProjects() ).thenReturn( projects );
   }

}
