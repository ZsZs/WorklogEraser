package com.kn.jira.worklogeraser.domain;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;

import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.xml.sax.SAXException;

import com.atlassian.jira.rest.client.domain.BasicIssue;
import com.atlassian.jira.rest.client.domain.BasicProject;
import com.atlassian.jira.rest.client.domain.Issue;
import com.atlassian.jira.rest.client.domain.Worklog;
import com.google.common.collect.Lists;
import com.kn.jira.worklogeraser.jiraadapter.JiraAdapter;
import com.kn.jira.worklogeraser.pdmadapter.PdmAdapter;

public class WorklogEraser implements ApplicationContextAware{
   public static final String ISSUE_STATUS = "Closed";
   public static final String OBSOLESCENCE_TIME_PERIOD = "worklogeraser.obsolescenceTimePeriod";
   private EraseActionLogger actionsLogger;
   private List<BasicProject> allJiraProjects = Lists.newArrayList();
   private ApplicationContext applicationContext;
   private Properties configurationProperties;
   private EmployeeMatchingStrategy employeeMatchingStrategy;
   private JiraAdapter jiraAdapter;
   private Logger programLogger = LoggerFactory.getLogger( this.getClass() );
   private PdmAdapter pdmAdapter;
   private Date obsolatedWorklogDate;
   private List<BasicIssue> subjectIssues = Lists.newArrayList();
   private JiraQuery worklogQueryStatement;

   // Constructors
   public WorklogEraser( Properties configurationProperties ) {
      this.configurationProperties = configurationProperties;
   }

   // Public accessor and mutator methods
   public void perform() {
      programLogger.trace( "Performing jira worklog erasure process started" );
      try{
         calculateObsolatedWorklogDate();
         setUpActionsLog();
         setUpConnectedSystemsAdapters();
         collectAllProjects();
         collectAllSubjectIssues();
         collectAllSubjectWorklogs();
         performErase();
      }catch( SAXException | IOException | ParserConfigurationException | TransformerException e ){
         e.printStackTrace();
      }finally{
         try{
            actionsLogger.tearDown();
            programLogger.trace( "Performing jira worklog erasure process finished" );
         }catch( TransformerException | IOException e ){
            e.printStackTrace();
         }
      }
   }

   // Properties
   public Date getObsolatedWorklogDate() { return obsolatedWorklogDate; }
   public List<BasicIssue> getSubjectIssues(){ return subjectIssues; }
   public JiraQuery getWorklogQueryStatement() { return worklogQueryStatement; }
   @Override public void setApplicationContext( ApplicationContext applicationContext ) throws BeansException { this.applicationContext = applicationContext; }

   // Protected, private helper methods
   protected void calculateObsolatedWorklogDate(){
      Integer obsolescenceTimePeriod = Integer.parseInt( configurationProperties.getProperty( OBSOLESCENCE_TIME_PERIOD ));
      DateTime currentDate = new DateTime();
      obsolatedWorklogDate = currentDate.minusDays( obsolescenceTimePeriod ).withTimeAtStartOfDay().toDate();
      
      programLogger.trace( "Obsolated worklog date determined as: " + obsolatedWorklogDate.toString() );
   }
   
   protected void collectAllProjects(){
      allJiraProjects = jiraAdapter.findAllProjects();
      programLogger.trace( "Number of Jira Projects found is: " + allJiraProjects.size() );
   }
   
   protected void collectAllSubjectIssues() {
      for( BasicProject jiraProject : allJiraProjects ){
         String query = "project=\"" + jiraProject.getKey() + "\""; 
         List<Issue> foundIssuesInProject = jiraAdapter.findIssuesByQuery( query );
         subjectIssues.addAll( foundIssuesInProject );
      }
   }
   
   protected void collectAllSubjectWorklogs() {
      for( BasicIssue jiraIssue : subjectIssues ){
         List<Worklog> worklogsAssociatedToIssue = Lists.newArrayList();
      }
   }

   protected void compileWorklogQueryStatement() {
   }
   
   protected void performErase(){
      employeeMatchingStrategy = applicationContext.getBean( "employeeMatchingStrategy", EmployeeMatchingStrategy.class );
      employeeMatchingStrategy.perforErase();
   }
   
   protected void setUpActionsLog() throws SAXException, IOException, ParserConfigurationException, TransformerException {
      actionsLogger = applicationContext.getBean( "eraseActionLog", EraseActionLogger.class );
      actionsLogger.setUp();
   }   
   
   protected void setUpConnectedSystemsAdapters(){
      jiraAdapter = applicationContext.getBean( "jiraAdapter", JiraAdapter.class );
      pdmAdapter = applicationContext.getBean( "pdmAdapter", PdmAdapter.class );
   }
}
